// replicator.script
// happylittleforkbomb fork
// u/pythonbashman
/*
CHANGES:
	replicator won't clobber milk.script or itself
	always scp new copies from "home" for easy updating
	milk will hack locally but ask "home" for 200 threads of grow or weaken
*/
print('checking programs');
var programs = ["brutessh.exe",
    "ftpcrack.exe",
    "relaysmtp.exe",
    "httpworm.exe",
    "sqlinject.exe",
    "nuke.exe"
];
var progs = 0;
for (var j = 0; j < programs.length; j++) {
    var prog = programs[j];
    if (fileExists(prog, "home")) {
        progs++;
        print(progs + ' found');
    }
}
var servers2 = [getHostname()];
var scanner = scan(getHostname());
var servers = servers2.concat(scanner);

if (getHostname() == "home") {
    // replicator is not able to spread past nodes with no RAM.
    // Add these to the breakwall array as they are located
    var breakwalls = ["summit-uni", "I.I.I.I", "omnia", "solaris", "unitalife", "global-pharm"];
    // hometargets keeps your perchased servers and darkweb from being clobbered
    var hometargets = ["foodnstuff", "sigma-cosmetics", "joesguns", "hong-fang-tea", "harakiri-sushi", "iron-gym"];
    var servers = hometargets.concat(breakwalls);
}

print(servers);

for (var i = 0; i < servers.length; i++) {
    var serv = servers[i];
    switch (serv) {
        case "home":
            break;
        case "darkweb":
            break;
        case getHostname():
            break;
        default:
            if (serverExists(serv)) {
                scp("replicator.script", "home", serv);
                scp("milk.script", serv);
                scp("h.script", serv);
                if (!hasRootAccess(serv)) {
                    if (getServerRequiredHackingLevel(serv) > getHackingLevel()) {
                        //tprint('server hacking level too high @ ' + serv + ': ' + getServerRequiredHackingLevel(serv));
                    } else {
                        print('hacking ' + serv);
                        var ports = getServerNumPortsRequired(serv);
                        if (!fileExists(programs[5], "home")) {
                            print('missing NUKE.exe program');
                        } else if (ports + 1 > progs) {
                            print('not enough programs waiting until you have enough programs');
                            for (; progs < ports + 1;) {
                                var progs = 0;
                                for (var j = 0; j < programs.length; j++) {
                                    var prog = programs[j];
                                    if (fileExists(prog, "home")) {
                                        progs++;
                                        print(progs + ' found need ' + ports + 1);
                                    }
                                }
                            }
                        } else {
                            for (var j = 0; j < ports; j++) {
                                if (fileExists(programs[0], "home")) {
                                    brutessh(serv);
                                    j++;
                                    if (j >= ports) { break; }
                                }
                                if (fileExists(programs[1], "home")) {
                                    ftpcrack(serv);
                                    j++;
                                    if (j >= ports) { break; }
                                }
                                if (fileExists(programs[2], "home")) {
                                    relaysmtp(serv);
                                    j++;
                                    if (j >= ports) { break; }
                                }
                                if (fileExists(programs[3], "home")) {
                                    httpworm(serv);
                                    j++;
                                    if (j >= ports) { break; }
                                }
                                if (fileExists(programs[4], "home")) {
                                    sqlinject(serv);
                                    j++;
                                    if (j >= ports) { break; }
                                }
                            }
                            nuke(serv);
                        }
                    }
                    print(serv + ' rooted');
                }
                // Force payload update
                if (args[0] == force) {
                    if (!scriptRunning("replicator.script", serv)) {
                        killall(serv);
                        //print('waiting 10s for killing scripts');
                        sleep(10000);
                        exec("replicator.script", serv, 1, 0);
                    }
                }
                if (!scriptRunning("milk.script", serv)) {
                    if (!scriptRunning("replicator.script", serv)) {
                        killall(serv);
                        //print('waiting 10s for killing scripts');
                        sleep(10000);
                        exec("replicator.script", serv, 1, 0);
                    }
                }
            }
            break;
    }
}
switch (getHostname()) {
    case "home":
        break;
    case "darkweb":
        break;
    default:
        spawn("milk.script", 1);
        exec("milk.script", getHostname(), 1);
        //print('waiting 5s for script start');
        sleep(5000);
        break;
}